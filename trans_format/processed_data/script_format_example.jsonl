{"definition_description": "This code finds and returns the instance named 'split30' from the OpenROAD design block.", "functionality_description": "1. Retrieve the design block using the get_db_block() method from OpenROAD. \n2. Use the findInst() method on the design block to search for the instance named 'split30'. \n3. Return the instance if found or an error if the instance does not exist.", "inputs": {"block": "The design block obtained using the get_db_block() method, which contains the layout and instances of the design."}, "outputs": "Returns the instance named 'split30' if it exists in the design block, or returns None if not found.", "code_paradigm": "block = ord.get_db_block()\n# Find the instance named \"split30\"\nreturn block.findInst(\"split30\")", "example": "query: Find instance split30\n code: # Get the design block\nblock = ord.get_db_block()\n# Find the instance named \"split30\"\nreturn block.findInst(\"split30\")"}
{"definition_description": "This code lists all the instance names from a design block in OpenROAD.", "functionality_description": "1. The code retrieves the design block using the `get_db_block()` method. \n2. It then gets all instances within the block using the `getInsts()` method. \n3. An empty list `inst_name` is initialized to store the names of the instances. \n4. A loop iterates over the instances and appends each instance's name to the `inst_name` list using the `getName()` method. \n5. Finally, the list of instance names is returned.", "inputs": {"block": "The design block from which instances will be retrieved using the `get_db_block()` method.", "insts": "The list of instances within the design block obtained using the `getInsts()` method.", "inst_name": "A list initialized to store the names of the instances."}, "outputs": "A list of instance names within the design block.", "code_paradigm": "# Get the design block\nblock = ord.get_db_block()\n# Get instances\ninsts = block.getInsts()\n# Initialize a list to store instance names\ninst_name =[]\n\n# Iterate over instances and append their names to the list\nfor inst in insts:\n        inst_name.append(inst.getName())\n\n# Return the list of instance names\nreturn inst_name", "example": "query: List all the instances name\n code: # Get the design block\nblock = ord.get_db_block()\n# Get instances\ninsts = block.getInsts()\n# Initialize a list to store instance names\ninst_name =[]\n\n# Iterate over instances and append their names to the list\nfor inst in insts:\n        inst_name.append(inst.getName())\n\n# Return the list of instance names\nreturn inst_name"}
{"definition_description": "This code retrieves all the selected nets from a design block in OpenROAD.", "functionality_description": "1. Get the design block from the current design using the `getBlock()` method. \n2. Use the `getNets()` method to retrieve all nets within the block. \n3. Iterate through each net in the list of nets. \n4. Check whether each net is selected using the `isSelect()` method. \n5. If the net is selected, add it to the `selected_nets` list. \n6. Return the list of selected nets after processing all the nets.", "inputs": {"block": "The design block containing the nets. Retrieved using the `getBlock()` method.", "nets": "The list of nets within the block, accessed via the `getNets()` method."}, "outputs": "Returns a list of nets that are selected in the design block.", "code_paradigm": "# Get the design block\nblock = design.getBlock()\n\n# Get all nets\nnets = block.getNets()\n\n# List to store selected nets\nselected_nets = []\n\n# Iterate through each net\nfor net in nets:\n    # Check if the net is selected\n    if net.isSelect():\n        # Append the net to the list\n        selected_nets.append(net)\n\n# Return the list of selected nets\nreturn selected_nets", "example": "query: Get the selected nets\n code: # Get the design block\nblock = design.getBlock()\n\n# Get all nets\nnets = block.getNets()\n\n# List to store selected nets\nselected_nets = []\n\n# Iterate through each net\nfor net in nets:\n    # Check if the net is selected\n    if net.isSelect():\n        # Append the net to the list\n        selected_nets.append(net)\n\n# Return the list of selected nets\nreturn selected_nets"}
{"definition_description": "This code retrieves the cut layer class rule for the layer named 'metal8' from the OpenROAD database.", "functionality_description": "1. Retrieve the current design block from the OpenROAD database using the 'ord.get_db_block()' method. \n2. Access the technology object associated with the design block through the 'getTech()' method. \n3. Use the 'findLayer()' method to locate the specific layer named 'metal8' within the technology object. \n4. Once the layer is found, the code fetches the cut layer class rule using the 'getTechLayerCutClassRules()' method. \n5. The function returns the cut layer class rules for the specified layer, which are used in the design's cut-layer processing and rule checking.", "inputs": {"block": "The design block object retrieved from the OpenROAD database, representing the current design.", "tech": "The technology object containing information about layers and other technology-specific rules in the design.", "layer": "The layer object representing the 'metal8' layer within the technology object, used to access its specific rules."}, "outputs": "Returns the cut layer class rules associated with the 'metal8' layer in the design's technology.", "code_paradigm": "block = ord.get_db_block()\ntech = block.getTech()\nlayer = tech.findLayer('metal8')\nreturn layer.getTechLayerCutClassRules()", "example": "query: Get the cut layer class rule of layer with name 'metal8'\n code: # Get the current design block from the OpenROAD database\nblock = ord.get_db_block()\n# Get the technology information\ntech = block.getTech()\n# Find the technology layer with name 'metal8'\nlayer = tech.findLayer('metal8')\n# Return the cut layer class rule\nreturn layer.getTechLayerCutClassRules()"}
{"definition_description": "This code sets the wire type of specific nets to 'ROUTED' in a given design block.", "functionality_description": "1. Retrieve the design block using the `getBlock` method on the design object.\n2. Define a list of net names that need to have their wire type set to 'ROUTED'.\n3. Iterate through each net name, find the corresponding net object using the `findNet` method of the block.\n4. Set the wire type of each net to 'ROUTED' using the `setWireType` method.\n5. This modifies the wire type of the specified nets in the design, which is important for routing the design in physical design tools.", "inputs": {"block": "The design block object, which contains all the nets in the design.", "nets": "A list of net names whose wire type needs to be set to 'ROUTED'."}, "outputs": "The wire type of the specified nets is set to 'ROUTED' in the design block.", "code_paradigm": "block = design.getBlock()\n\n# List of net names to set wire type as ROUTED\nnets = [\n    \"_000_\",\n    \"_001_\",\n    \"_002_\",\n    \"_003_\",\n    \"_004_\",\n    \"_005_\",\n    \"_006_\",\n    \"_007_\",\n    \"_008_\",\n    \"_009_\",\n    \"_010_\"\n]\n\n# Iterate through each net name\nfor name in nets:\n    # Find the net object by name\n    net = block.findNet(name)\n    \n    # Set the wire type of the net as ROUTED\n    net.setWireType('ROUTED')", "example": "query: Set the following nets wire type to ROUTED: _000_, _001_, _002_, _003_, _004_, _005_, _006_, _007_, _008_, _009_, _010_\n\n code: # Get the design block\nblock = design.getBlock()\n\n# List of net names to set wire type as ROUTED\nnets = [\n    \"_000_\",\n    \"_001_\",\n    \"_002_\",\n    \"_003_\",\n    \"_004_\",\n    \"_005_\",\n    \"_006_\",\n    \"_007_\",\n    \"_008_\",\n    \"_009_\",\n    \"_010_\"\n]\n\n# Iterate through each net name\nfor name in nets:\n    # Find the net object by name\n    net = block.findNet(name)\n    \n    # Set the wire type of the net as ROUTED\n    net.setWireType('ROUTED')\n\n\n"}
